apiVersion: batch/v1
kind: Job
metadata:
  name: create-super-user
  namespace: app-namespace
spec:
  template:
    spec:
      containers:
        - name: create-super-user
          image: USERIMAGE/backend-api:1.02 # Replace with your image
          command: ["python", "src/infrastructure/scripts/create_super_user.py"]
          env:
            - name: SUPER_USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: SUPER_USER_EMAIL
            - name: SUPER_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: SUPER_USER_PASSWORD
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_PASSWORD
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_PORT
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_NAME
      restartPolicy: OnFailure

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: app-namespace
type: Opaque
data:
  DATABASE_USER: bW9uZ28=
  DATABASE_PASSWORD: bW9uZ28=
  DATABASE_HOST: c3ZjLW1vbmdvLWRhdGFiYXNl
  DATABASE_PORT: MjcwMTg=
  DATABASE_NAME: dmlkZW9fcHJvY2Vzc29y
  CLOUD_BUCKET_NAME: dGVjaGNoYWxsZW5nZS1zdW5jaW4=

  SUPER_USER_EMAIL: c3VwZXJ1c2VyQGV4YW1wbGUuY29t
  SUPER_USER_PASSWORD: c3VwZXJwYXNzd29yZA==

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: app-namespace
  labels:
    app: backend-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
        - name: backend-api
          image: USERIMAGE/backend-api:1.02 # Replace with your image 
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 300
            failureThreshold: 10
            httpGet:
              scheme: HTTP
              path: /health_check
              port: 8000
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 300
            failureThreshold: 10
            httpGet:
              scheme: HTTP
              path: /health_check
              port: 8000
          env:
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_PASSWORD
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_PORT
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_NAME
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: app-namespace
  labels:
    app: backend-api
spec:
  selector:
    app: backend-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: ClusterIP
